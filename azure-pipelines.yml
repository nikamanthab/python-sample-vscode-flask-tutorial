# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

parameters:
- name: succeed
  displayName: Succeed or fail
  type: boolean
  default: false


# strategy:
#   matrix:
#     Python27:
#       python.version: '2.7'
#       imageName: ubuntu-latest
#     Python35:
#       python.version: '3.5'
#       imageName: ubuntu-latest
#     Python36:
#       python.version: '3.9'
#       imageName: windows-latest
#     Python37:
#       python.version: '3.7'
#       imageName: macos-latest

pool:
  vmImage: ubuntu-latest
  python.version: '3.5'

stages:
  - stage: Build
    jobs:
    - job: Work
      steps:
      - script: echo Hello, world!
        displayName: 'Run a one-line script'

      # This malformed command causes the job to fail
      # Only run this command if the succeed variable is set to false
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.5'
        displayName: 'Use Python 3.5'
        condition: eq(${{ parameters.succeed }}, false)
      
      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        displayName: 'Install dependencies'

      - script: |
          pip install pytest pytest-azurepipelines
          pytest
        displayName: 'pytest'

    - job: ErrorHandler
      dependsOn: Work
      condition: failed()
      steps: 
      - bash: |
          az boards work-item create \
            --title "Build $(build.buildNumber) failed" \
            --type bug \
            --org $(System.TeamFoundationCollectionUri) \
            --project $(System.TeamProject)
        env: 
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
        displayName: 'Create work item on failure'
  
  - stage: Build
    jobs:
    - job: Work
      steps:
      - script: echo 'nitin is great'
      displayName: 'Run a one-line script'

# steps:
# - task: UsePythonVersion@0
#   inputs:
#     versionSpec: '$(python.version)'
#   displayName: 'Use Python $(python.version)'

# - script: |
#     python -m pip install --upgrade pip
#     pip install -r requirements.txt
#   displayName: 'Install dependencies'

# - script: |
#     pip install pytest pytest-azurepipelines
#     pytest
#   displayName: 'pytest'
